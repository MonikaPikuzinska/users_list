{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","users","setUsers","usersFiltered","setUsersFiltered","handleGetUsers","a","axios","get","response","usersData","data","sort","b","last_name","useEffect","handleChecked","e","checkbox","document","getElementById","target","id","checked","console","log","className","type","placeholder","onChange","foundUser","filter","user","i","first_name","toLowerCase","includes","value","map","onClick","alt","src","avatar","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sQAsDeA,MAlDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,KAKPC,EAAc,uCAAG,8BAAAC,EAAA,sEACEC,IAAMC,IAFnB,kFACW,OACfC,EADe,OAEfC,EAAYD,EAASE,KAAKC,MAAK,SAACN,EAAEO,GAAH,OAAUP,EAAEQ,UAAYD,EAAEC,UAAa,EAAMD,EAAEC,UAAYR,EAAEQ,WAAc,EAAI,KACpHZ,EAASQ,GACTN,EAAiBM,GAJI,2CAAH,qDAMpBK,qBAAU,WACRV,MACA,IAEF,IAOMW,EAAgB,SAACC,GACrB,IAAMC,EAAWC,SAASC,eAAT,UAA2BH,EAAEI,OAAOC,GAApC,QACjBJ,EAASK,SAAWL,EAASK,QAC7BC,QAAQC,IAAIR,EAAEI,OAAOC,KAIvB,OACE,sBAAKI,UAAU,4BAAf,UACE,oBAAIA,UAAU,sEAAd,8BACA,sBAAMA,UAAU,0BAAhB,SACE,uBAAOC,KAAK,OAAOC,YAAY,cAAcC,SAlB9B,SAACZ,GACpB,IAAMa,EAAY7B,EAAM8B,QAAO,SAACC,EAAKC,GACnC,OAAOD,EAAKE,WAAWC,cAAcC,SAASnB,EAAEI,OAAOgB,MAAMF,gBAAkBH,EAAKlB,UAAUqB,cAAcC,SAASnB,EAAEI,OAAOgB,MAAMF,kBAEtI/B,EAAiB0B,QAgBd3B,GAAiBA,EAAcmC,KAAI,SAAAN,GAClC,OACE,sBAAKV,GAAIU,EAAKV,GAAII,UAAU,4BAA4Ba,QAASvB,EAAjE,UACE,qBAAKU,UAAU,MAAMJ,GAAIU,EAAKV,GAAIkB,IAAI,SAASC,IAAKT,EAAKU,SACzD,sBAAKhB,UAAU,sBAAsBJ,GAAIU,EAAKV,GAA9C,UAAmDU,EAAKE,WAAxD,IAAqEF,EAAKlB,aAC1E,sBAAMQ,GAAIU,EAAKV,GAAII,UAAU,iBAA7B,SACI,uBAAOC,KAAK,WAAWL,GAAE,UAAKU,EAAKV,GAAV,OAAmBqB,KAAK,SAASJ,QAASvB,gBCjCpE4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,M","file":"static/js/main.f878ccd6.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\n\nfunction App() {\n  const [users, setUsers] = useState([])\n  const [usersFiltered, setUsersFiltered] = useState([]);\n\n  const API = 'https://teacode-recruitment-challenge.s3.eu-central-1.amazonaws.com/users.json';\n  const handleGetUsers = async () => {\n    const response = await axios.get(API);\n    const usersData = response.data.sort((a,b) => (a.last_name > b.last_name) ? 1 : ((b.last_name > a.last_name) ? -1 : 0));\n    setUsers(usersData);\n    setUsersFiltered(usersData);\n  };\n  useEffect(()=>{\n    handleGetUsers();\n  },[]);\n  \n  const handleSearch = (e) => {\n    const foundUser = users.filter((user,i)=>{\n      return user.first_name.toLowerCase().includes(e.target.value.toLowerCase()) || user.last_name.toLowerCase().includes(e.target.value.toLowerCase())\n    })\n    setUsersFiltered(foundUser)\n  }\n  \n  const handleChecked = (e) => {\n    const checkbox = document.getElementById(`${e.target.id}box`);\n    checkbox.checked = !checkbox.checked\n    console.log(e.target.id);\n      \n  }\n\n  return (\n    <div className=\"flex flex-col bg-gray-200\">\n      <h1 className=\"bg-green-600 block p-5 text-center text-2xl font-bold text-gray-100\">Monsters Rolodex</h1>\n      <form className=\"self-center bg-gray-200\">\n        <input type=\"text\" placeholder=\"Find a user\" onChange={handleSearch}/>\n      </form>\n      {usersFiltered && usersFiltered.map(user => {\n        return (\n          <div id={user.id} className=\"flex flex-row bg-gray-200\" onClick={handleChecked}>\n            <img className=\"m-5\" id={user.id} alt=\"avatar\" src={user.avatar}/>\n            <div className=\"font-bold block m-3\" id={user.id}>{user.first_name} {user.last_name}</div>\n            <form id={user.id} className=\"searcher__form\">\n                <input type=\"checkbox\" id={`${user.id}box`} name=\"scales\" onClick={handleChecked}/>\n            </form>\n        </div>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}